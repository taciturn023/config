void createUDPClient(char *ip, int port) {
    int sockfd;
    char buffer[1024];
    struct sockaddr_in servaddr;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);

    memset(&servaddr, 0, sizeof(servaddr));

    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(port);
    servaddr.sin_addr.s_addr = inet_addr(ip);

    int n, len = sizeof(servaddr);
    while (1) {
        printf("Client : ");
        fgets(buffer, 1024, stdin);
        sendto(sockfd, (const char *)buffer, strlen(buffer), MSG_CONFIRM, (const struct sockaddr *)&servaddr, sizeof(servaddr));
        
        n = recvfrom(sockfd, (char *)buffer, BUFFER_SIZE, MSG_WAITALL, (struct sockaddr *)&servaddr, (socklen_t *)&len);
        buffer[n] = '\0';
        printf("Server : %s\n", buffer);
    }

    close(sockfd);
}




void createUDPServer(char *ip, int port) {
    int sockfd;
    struct sockaddr_in servaddr, cliaddr;
    char buffer[1024];
    socklen_t len;
    int n;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);

    memset(&servaddr, 0, sizeof(servaddr));
    memset(&cliaddr, 0, sizeof(cliaddr));

    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = inet_addr(ip);
    servaddr.sin_port = htons(port);

    bind(sockfd, (const struct sockaddr *)&servaddr, sizeof(servaddr));

    len = sizeof(cliaddr);  
    while (1) {
        n = recvfrom(sockfd, (char *)buffer, 1024, MSG_WAITALL, (struct sockaddr *)&cliaddr, &len);
        buffer[n] = '\0';
        printf("Client : %s\n", buffer);
        printf("Server : ");
        fgets(buffer, BUFFER_SIZE, stdin);
        sendto(sockfd, (const char *)buffer, strlen(buffer), MSG_CONFIRM, (const struct sockaddr *)&cliaddr, len);
    }

    close(sockfd);
}



void createTCPClient(char *ip, int port) {
    int sockfd;
    struct sockaddr_in serv_addr;
    char buffer[1024] = {0};

   sockfd = socket(AF_INET, SOCK_STREAM, 0);

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(port);
    serv_addr.sin_addr.s_addr = inet_addr(ip);

   connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));

    while (1) {
        printf("Client : ");
        fgets(buffer, 1024, stdin);
        send(sockfd, buffer, strlen(buffer), 0);
        read(sockfd, buffer, 1024);
        printf("Server : %s\n", buffer);
        bzero(buffer, 1024);
    }

    close(sockfd);
}



void createTCPServer(char *ip, int port) {
    int sockfd, newsockfd;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};

    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = inet_addr(ip);
    address.sin_port = htons(port);

    bind(sockfd, (struct sockaddr *)&address, sizeof(address));

    listen(sockfd, 3) ;

   newsockfd = accept(sockfd, (struct sockaddr *)&address, (socklen_t*)&addrlen);
       


    while (1) {
        read(newsockfd, buffer, 1024);
        printf("Client: %s\n", buffer);
        printf("Server: ");
        fgets(buffer, 1024, stdin);
        send(newsockfd, buffer, strlen(buffer), 0);
        
    }

    close(newsockfd);
    close(sockfd);
}